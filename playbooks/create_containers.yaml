---
- name: Create new LXC container in Proxmox
  hosts: proxmox  # can run on localhost, but why bother if that's a VM
  remote_user: '{{ api_user }}'
  tasks:
    - name: Create LXC Containers
      proxmox:
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}@pam'
        api_password: '{{ api_password }}'
        node: '{{ node }}'
        hostname: '{{ hostvars[item]["inventory_hostname"] }}'
        vmid: '{{ hostvars[item].vmid }}'  # Must be specified in host_vars/<hostname>.yaml
        password: '{{ hostvars[item].password | default(ct_defaults.password) }}'
        disk: '{{ hostvars[item].disk | default(ct_defaults.disk) }}'
        cores: '{{ hostvars[item].cores | default(ct_defaults.cores) }}'
        cpus: '{{ hostvars[item].cpus | default(ct_defaults.cpus) }}'
        memory: '{{ hostvars[item].memory | default(ct_defaults.memory) }}'
        swap: '{{ hostvars[item].swap | default(ct_defaults.swap) }}'
        ostemplate: '{{ hostvars[item].ostemplate | default(ct_defaults.ostemplate) }}'
        searchdomain: '{{ hostvars[item].searchdomain | default(ct_defaults.searchdomain) }}'
        nameserver: '{{ hostvars[item].nameserver | default(ct_defaults.nameserver) }}'
        netif: '{{ hostvars[item].netif | default(ct_defaults.netif) }}'
        pubkey: '{{ hostvars[item].pubkey | default(ct_defaults.pubkey) }}'  # default to non-root user on PVE
        state: '{{ hostvars[item].state | default(ct_defaults.state) }}'
        onboot: '{{ hostvars[item].onboot | default(ct_defaults.onboot) }}'
      with_items: '{{ groups["containers"] }}'  # from inventory
      loop_control:
        pause: 5
      register: created_containers

    - name: sleep
      pause:
        seconds: 10
      when: created_containers.changed

    - name: Start container(s)
      proxmox:
        api_host: '{{ api_host }}'
        api_user: '{{ api_user }}@pam'
        api_password: '{{ api_password }}'
        node: '{{ node }}'
        hostname: '{{ hostvars[item.item].inventory_hostname }}'
        state: 'started'
      with_items: '{{ created_containers.results }}'
      when: created_containers.changed

    - name: sleep
      pause:
        seconds: 10
      when: created_containers.changed
